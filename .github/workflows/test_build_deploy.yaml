name: Test, build and deploy

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

jobs:

  tests:
    runs-on: ubuntu-22.04
    env:
      DEBUG: False
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres
      SECRET_KEY: 'you-will-never-guess'
      VK_OAUTH2_KEY: 1234567890
      VK_OAUTH2_SECRET: 1234567890
    services:
      postgres:
        image: postgres:13.0-alpine
        env:
          POSTGRES_PASSWORD: postgres
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'x64'
          cache: 'poetry'
      - name: Install dependencies
        run: |
          poetry install --no-root
          poetry add pytest-cov --dev
      - name: Run tests
        env:
          SECRET_KEY: 'you-will-never-guess'
          POSTGRES_HOST: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        run: |
          poetry run pytest \
            --junitxml=pytest.xml \
            --cov-report=term-missing:skip-covered \
            --cov=todolist \
          tests/ | tee pytest-coverage.txt
      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml

  build:
    if: startsWith(github.event.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/todolist
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-22.04
    needs: build
    environment:
      name: Production
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get tag
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
      - name: Update Docker Compose
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          TAG_NAME: ${{ steps.vars.outputs.tag }}
        run: |
          envsubst '$DOCKER_HUB_USERNAME,$TAG_NAME' < deploy/docker-compose.prod.yaml > deploy/docker-compose.yaml
          rm -f deploy/docker-compose.prod.yaml
      - name: Decrypt secrets
        uses: anthonykgross/ansible-vault-cli-github-action@v1
        with:
          vault_key: ${{ secrets.VAULT_PASSWORD }}
          command: "ansible-vault decrypt deploy/.env"
      - name: Copy on server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "deploy/*"
          target: todolist
          strip_components: 1
      - name: Run compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd todolist
            docker compose pull
            docker compose up -d
      - name: Clear after deploy
        if: always()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            docker system prune -a -f
