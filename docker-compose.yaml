version: '3.8'

services:

  db:
    image: postgres:13.0-alpine
    restart: on-failure
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg_data_todolist:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 3s
      timeout: 3s
      retries: 5
    ports:
      - "5432:5432"
    networks:
      - backend_nw

  api:
    build: .
    restart: always
    env_file:
      - ./.env
    environment:
      POSTGRES_HOST: db
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    healthcheck:
      test: python3 -c 'import http.client;http.client.HTTPConnection("127.0.0.1:8000", timeout=1).request("GET", "/ping/")'
      interval: 3s
      timeout: 3s
      retries: 5
    networks:
      - backend_nw
      - frontend_nw
    volumes:
      - ./todolist/:/opt/todolist

  collect_static:
    build: .
    env_file:
      - ./.env
    environment:
      POSTGRES_HOST: db
    networks:
      - backend_nw
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - django_static:/opt/static/
    command: python3 manage.py collectstatic -c --no-input

  frontend:
    image: sermalenk/skypro-front:lesson-36
    restart: always
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_healthy
      collect_static:
        condition: service_completed_successfully
    networks:
      - frontend_nw
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/conf.d/default.conf
      - django_static:/usr/share/nginx/html/static/

volumes:
  pg_data_todolist:
  django_static:

networks:
  backend_nw:
    driver: bridge
  frontend_nw:
    driver: bridge
